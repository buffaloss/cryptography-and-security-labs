Task 2:

Generate p and q so that p*q = n is at least 3072 bits.
p  = RandomPrime[{2^1200, 2^1600}] = 39970766541890547795406980961478983746136290631206486220791536504774834757410798648050465125498389819931547274613567360407259739612524639144351352401830963635197620275210915241206453863239285200900873398821759480762670041097231887183499017734499158231669507635227307623693312766137713652487247267795460570060630380692559254243897429578008123913861256136395870470131676278279027948145528682491616554423349187615723401600235873276964445755362100114563469974538522625094737452584407743
q = RandomPrime[{2^900, 2^1300}] = 41590751430638128903561721499933349690337663481861759649026437327816623376502876222969288887931848722176404514469097184697609268222590740000084520668156109312066411146850317275605847028559196431480992602184349738369666096271839932092844798288075255018300307061131691807660474897454760415940038702196754331984699297898330366873755902643029764196945545170584543699850653174360742839834636111105567981655261790738208526052184719015316468715127316188668365818455023426862356622391569467
n = p * q = (its 3200 bits) 1662414215735836957053204398601763450730054893362961564588801748814942834903825409500357294116180788759923748933232584011658922278886820133906272062549310185447234036629451160239552741699446403994745836977373953591499433616586482706273169445526869889722250379793896782141579534495028553718209289822223720859125449551124245455765004706593848612096337524741451174156750855606346186748093623976893680400984649986718854374535513146137632778736875032018962224719486878139674769272005498396919169709262051506238645457366388175746732501600943656214582864914057417553560499753941518953581730714055129831547434753043696098545255288682794775063700383685395639288690622714292595577278193897787088078322220389760891468484265858186141219584639623271359582356454677114544946581797365580631158108106635381401466499860178521005335022562065981597811031444953838137926244231522859212558831834240209006889477699142447529477261096881057551619101844889021634264149717937538458437182981

Compute the totient function φ(n) = (p-1)*(q-1) = 


Choose an integer e such that 1 < e < φ(n) and gcd(φ(n), e) = 1. e is your public key exponent.
e = 2735

Compute d, the multiplicative inverse of e modulo φ(n). This is your private key.
d ≡ e^(-1) mod φ(n) = 13372253289282783566789943974127530499473933328696582969270068911856944193010661429253331067844964297154779698914485136474038862938029266159392316408074889974347037954606188491872087867417850416045487536929516262893231275892103334383184543985956540246394701409676683439530073037985604454040440356888088431042325371160780036572881207877537356294742020308706371419176789332116861465615378328150515893536256782342893892592241787647176570797883455467794211679644867027083307102005163057746935407023083819290654020442774846165996754862054607422568701539706465901308037964223811744611901334308692320466334030076725097548613263317525512801347642998636202112981381473434668183961069233400462126357837670078005334620502312541327661548162698432407308040930170166996950722400406777833123999469695844019590250090439584231716293101839821995393862500263207568344837080445537684501889887098802487905713705884691567566817811225302796265028549146785407132706866783023684254532551

To sign the message, compute the hash of the message using the RipeMD-256 hash algorithm. Convert the hash to decimal representation.
m = had the president recommended his own system to secretary of statejames madison, he
would have endowed his country with a method ofsecret communication that would almost
certainly have withstood anycryptanalytic attack of those days. instead he appears to have
filed andforgotten it. it was not rediscovered among his papers in the library ofcongress until
1922, coincidentally the year the u.s. army adopted analmost identical device that had been
independently invented. later,other branches of the american government used the jefferson
system,generally slightly modified, and it often defeated the best efforts of the20th-century
cryptanalysts who tried to break it down! to this day thenavy uses it. this is a remarkable
longevity. so important is his systemthat it confers upon jefferson the title of father of
americancryptography.charles wheatstone had a remarkably fertile mind. he constructed
anelectric telegraph before morse did, invented the concertina, improved the dynamo, studied
underwater telegraphy,produced some of the first stereoscopic drawings, published half a
dozenpapers on acoustics, discussed phonetics and hypothetical speakingmachines in print,
conducted numerous electrical experiments, andpopularized a method for the extremely
accurate measurement ofelectrical resistance now in frequent use and called the
"wheatstonebridge." his work was highly enough regarded for him to be elected afellow of
the royal society and to be knighted. he was nominallyprofessor of experimental philosophy
at king's college, london, but was so excessively shy thathe hardly ever actually
lectured.another of his inventions was a cipher for secrecy in telegraphy,which, however,
carries the name of his friend lyon playfair, first baronplayfair of st. andrews. a scientist and
public figure of victorianengland, playfair was at one time or another deputy speaker of
thehouse of commons, postmaster general, and president of the britishassociation for the
advancement of science.playfair demonstrated what he called "wheatstone's
newlydiscoveredsymmetrical cipher" at a dinner in january, 1854, given by the presidentof
the governing council, lord granville. one of the guests was queenvictoria's husband, prince
albert; another was the home secretary andfuture prime minister, lord palmerston. playfair
explained the system tohim, and, while in dublin a few days later, received two short letters
inthe cipher from palmerston and granville, showing that both had readilymastered it.

The result hash in hexadecimal is: 
hash = 97f490bf925df10f64cd3ace418f51766da3215e7dd820c2f8149b8e2238d74f
Decimal: hash = 68731349836117141621011773877299027180659926592116740220583263187702151436111

The signature is computed as s = hash^d mod n.
s =  927451637258478615620268703095869894036019179136881038991012456323919225853083134039097924252918680426936051006928991058169622841699881448244447187077641448798012576313946932956953486516886531564823377764820689273598263518570420434130970501500867841016875628712864395426807160841191147810044165425338229537918725861173145141030343962336355864473487854725713943618926533771969283569824194689317997948726833167500773743795804507201762115024016378405335711580559735193327241587887779418036372526387614729610343924137803271695350717047122468375285069321055584576581354039320740156231316853037645976054712884958951822684349652486184250797643027744939017992360569413312350732799336905524335020405341848176254646421561712367427661444010178188423970201173537468169315419530691256441278016696340880815101413620055803822036915371940995134888773596785158372935299567000962175409123047625611855927339342058942780395948120488454888115608848257885868065098738710854525831270260

To validate the signature, compute v = s^e mod n. If v equals the decimal representation of the hash, the signature is valid.
v =  68731349836117141621011773877299027180659926592116740220583263187702151436111

