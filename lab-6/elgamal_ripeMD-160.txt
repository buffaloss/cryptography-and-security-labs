Task 3.

Message = had the president recommended his own system to secretary of statejames madison, he
would have endowed his country with a method ofsecret communication that would almost
certainly have withstood anycryptanalytic attack of those days. instead he appears to have
filed andforgotten it. it was not rediscovered among his papers in the library ofcongress until
1922, coincidentally the year the u.s. army adopted analmost identical device that had been
independently invented. later,other branches of the american government used the jefferson
system,generally slightly modified, and it often defeated the best efforts of the20th-century
cryptanalysts who tried to break it down! to this day thenavy uses it. this is a remarkable
longevity. so important is his systemthat it confers upon jefferson the title of father of
americancryptography.charles wheatstone had a remarkably fertile mind. he constructed
anelectric telegraph before morse did, invented the concertina, improved the dynamo, studied
underwater telegraphy,produced some of the first stereoscopic drawings, published half a
dozenpapers on acoustics, discussed phonetics and hypothetical speakingmachines in print,
conducted numerous electrical experiments, andpopularized a method for the extremely
accurate measurement ofelectrical resistance now in frequent use and called the
"wheatstonebridge." his work was highly enough regarded for him to be elected afellow of
the royal society and to be knighted. he was nominallyprofessor of experimental philosophy
at king's college, london, but was so excessively shy thathe hardly ever actually
lectured.another of his inventions was a cipher for secrecy in telegraphy,which, however,
carries the name of his friend lyon playfair, first baronplayfair of st. andrews. a scientist and
public figure of victorianengland, playfair was at one time or another deputy speaker of
thehouse of commons, postmaster general, and president of the britishassociation for the
advancement of science.playfair demonstrated what he called "wheatstone's
newlydiscoveredsymmetrical cipher" at a dinner in january, 1854, given by the presidentof
the governing council, lord granville. one of the guests was queenvictoria's husband, prince
albert; another was the home secretary andfuture prime minister, lord palmerston. playfair
explained the system tohim, and, while in dublin a few days later, received two short letters
inthe cipher from palmerston and granville, showing that both had readilymastered it.

(validator)
RipeMD-160 (Message) = 4d05c8ef003d23a597c345fcc1f442a33f3ba7dc

Party1-1:
    1. Hash the message using RipeMD-160
    2. Transform the hash into a decimal number
    2. Generate p
    3. Generate g
    4. Generate the private key PrivK1
    5. Compute the public key PubK1

    (validator)
    RipeMD-160(Message) = 4d05c8ef003d23a597c345fcc1f442a33f3ba7dc

    (decimal equivalent of validator)
    h = 439721296864417795747603724379350979362456053724

    p = 32317006071311007300153513477825163362488057133489075174588434139269806834136210002792056362640164685458556357935330816928829023080573472625273554742461245741026202527916572972862706300325263428213145766931414223654220941111348629991657478268034230553086349050635557712219187890332729569696129743856241741236237225197346402691855797767976823014625397933058015226858730761197532436467475855460715043896844940366130497697812854295958659597567051283852132784468522925504568272879113720098931873959143374175837826000278034973198552060607533234122603254684088120031105907484281003994966956119696956248629032338072839127039

    g = 2

    PrivK1 = 684

    PubK1 = g^PrivK1 mod p = 80263304161809898486953580976564463280492245526476651908848280381297792881730359224146523075524726123458602430056430323990164676669064390001339947061948865508349970567755807467524166227482951618519489314816

Public-1:
    Party1 -(p, g, PubK1)-> Party2

Party2-1:
    1. Generate the private key PrivK2
    2. Compute the public key PubK2
    3. Compute the shared secret s2

    PrivK2 = 477

    PubK2 = g ^ PrivK2 mod p = 390218568789499028922699653724145788218574767833121393857394619953171467352470702515038262882936496394978366390175827861930996959911035663286272

    s2 = PubK1 ^ PrivK2 mod p = 24876162892962181091404316318259136756555032733737463115087404411306537931604574405832551497065804979521835156565857877826375481785789458394766627740089675013942697917157006726211754059652158827914598206231221734789581996118529692964148566558595732238157751751427129887103914515888668164335422403394496612840547451738928032161064970429493538894220184763329284186373137699662970926865101258865074810394898157092110120193122954698266158997008588094825209906219367942502196564644175856968913377837832231006610264491322305371669642967920068244464861186738488750922320017721469932539563081675260578395163366622922209182538

Public-2:
    Party2 -(PubK2)-> Party1

Party1-2:
    1. Compute the shared secret s1
    2. Sign h using the shared secret s1

    s1 = PubK2 ^ PrivK1 mod p = 24876162892962181091404316318259136756555032733737463115087404411306537931604574405832551497065804979521835156565857877826375481785789458394766627740089675013942697917157006726211754059652158827914598206231221734789581996118529692964148566558595732238157751751427129887103914515888668164335422403394496612840547451738928032161064970429493538894220184763329284186373137699662970926865101258865074810394898157092110120193122954698266158997008588094825209906219367942502196564644175856968913377837832231006610264491322305371669642967920068244464861186738488750922320017721469932539563081675260578395163366622922209182538

    Sign(h) = h * s1 mod p = 10938578608303837443091702055927205375067139432888704684117953412888001018513304543956323038446204870146737192570990890374457242003448179094304450000225025666515723485381442058821786363024516517750307812763638406149927746995026817068239685539474663040785486145930708156749894342870155898312745186520968143625072635613911444524009284574782825730986950934118083848226839745972314591816551009434403387059234024235078269864846785780037319167693207439362683593169191050734857334625369532077603211903533562791334247292673049921670830429347337643419446069066443074608993433017448902527967709334521545032177675245188169451087391504506917928720515380185180706040759450671512
    mod p = 28182492508128089815873429054572717818916243592432243851309511954905721842028719944135062474825093377497156045182827598169338335992179893771409935640710032347542938643718565915092912346591832759001239904146195734419697929660600061906313816519088382329760725443636250736823533173977744851081823641403360417790298897563027936238846726253655594063383865530457569606633078671924052665703758867296492426413683696908083016425566277390412849378625844264277535083633425995581253199466149232185652072145132783619167744895965449380656381814291161705122363900597901759569077055942268578968589312459153432759785688196745180254248


Public-3:
    Party1 -(Sign(h))-> Party2

Party2-2:
    1. Check the signature using the shared secret s2
    
    h = Sign(h) * s2 ^ (-1) mod p = 439721296864417795747603724379350979362456053724